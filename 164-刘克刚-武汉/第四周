# 高斯噪声

import random

import cv2


def GaussianNoise(src,means,sigma,percetage):
    NoiseImg = src
    NoiseNum = int(percetage * src.shape[0] * src.shape[1])
    for i in range(NoiseNum):
        randX = random.randint(0,src.shape[0] - 1)
        randY = random.randint(0,src.shape[1] - 1)

        NoiseImg[randX,randY] = NoiseImg[randX,randY] + random.gauss(means,sigma)

        if NoiseImg[randX,randY] < 0:
            NoiseImg[randX,randY] = 0
        elif NoiseImg[randX,randY] > 255:
            NoiseImg[randX,randY] = 255
    return NoiseImg
img = cv2.imread('lenna.png',0)
img1 = GaussianNoise(img,2,4,0.9)
img = cv2.imread('lenna.png')
img2 =cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.imshow('source',img2)
cv2.imshow('GaussianNoise',img1)
cv2.waitKey(0)

# 椒盐噪声
import random

import cv2


def fun1(src,percetage):
    NoiseImg = src
    Noisenum = int(percetage * src.shape[0] * src.shape[1])

    for i in range(Noisenum):
        randX = random.randint(0,src.shape[0] - 1)
        randY = random.randint(0,src.shape[1] - 1)

        if random.random() <= 0.5:
            NoiseImg[randX,randY] = 0
        else:
            NoiseImg[randX,randY]  = 255
    return NoiseImg
img = cv2.imread('lenna.png',0)
img1 = fun1(img,0.2)
img = cv2.imread('lenna.png')
img2 = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.imshow('source',img2)
cv2.imshow('Noise',img1)
cv2.waitKey(0)

# PCA
import numpy as np


class CPCA(object):
    """
    用 PCA求 样本矩阵 X 的 K 阶降维矩阵 Z
    X.shape(m,n) m:行样例   n: n个特征
    """

    def __init__(self, X, K):
        """

        :param X: 样本矩阵。
        :param K: 降维后的阶数
        """
        self.X = X
        self.K = K
        self.centrX = []
        self.C = []
        self.U = []
        self.Z = []

        self.centrX = self._centralized()
        self.C = self._cov()
        self.U = self._U()
        self.Z = self._Z()

    def _centralized(self):
        """矩阵X的中心化"""
        print('样本矩阵X:\n', self.X)
        centrX = []
        # mean = np.array(np.mean(self.X,0))
        mean = np.array([np.mean(attr) for attr in self.X.T])
        print('样本集的特征均值:\n', mean)
        centrX = self.X - mean
        print('样本矩阵X的中心化 centrX:\n', centrX)
        return X

    # def _cov(self):
    #     """求样本矩阵X的协方差矩阵C"""
    #     ns = np.shape(self.centrX)[0]
    #     #  样本矩阵的协方差矩阵C
    #     C = np.dot(self.centrX.T, self.centrX)/(ns - 1)
    #     """
    #     C = (X.T * X)/m 为啥是(ns - 1) 而不是 ns
    #     1是样本的无偏估计表示
    #     https://zhuanlan.zhihu.com/p/102043269?utm_id=0，
    #     只不过编程有时候没有区分那么仔细，n-1跟n都在用
    #     """
    #     print("样本矩阵的协方差矩阵C:\n ", C)
    #     return C
    def _cov(self):
        '''求样本矩阵X的协方差矩阵C'''
        #样本集的样例总数
        ns = np.shape(self.centrX)[0]
        #样本矩阵的协方差矩阵C
        C = np.dot(self.centrX.T, self.centrX)/(ns-1 )
        print('样本矩阵X的协方差矩阵C:\n', C)
        return C
    def _U(self):
        """求X降维转换矩阵U，shape = (n,k),n是X的特征维度总数，k是降维矩阵的特征"""
        # 先求X的协方差矩阵C的特征值a与特征向量b
        a, b = np.linalg.eig(self.C)
        print('C的特征值：\n', a)
        print('C的特征向量：\n', b)

        # 特征值降序的的索引序列
        ind = np.argsort(-1 * a)
        # 构建K阶降维转换矩阵U
        UT = [b[:, ind[i]] for i in range(self.K)]
        U = np.transpose(UT)
        print('%d 阶降维转换矩阵 U：\n' % self.K, U)
        return U

    def _Z(self):
        """
        按照 Z = XU 求降维矩阵Z，shape = (m,k), n是样本总数，k是降维矩阵中特征维度总数
        """
        Z = np.dot(self.X, self.U)
        print('X shape:', np.shape(self.X))
        print('U shape:', np.shape(self.U))
        print('Z shape:', np.shape(Z))
        print('样本矩阵X的降维矩阵Z:\n', Z)
        return Z


if __name__ == '__main__':
    '10样本3特征的样本集, 行为样例，列为特征维度'
    X = np.array([[10, 15, 29],
                  [15, 46, 13],
                  [23, 21, 30],
                  [11, 9, 35],
                  [42, 45, 11],
                  [9, 48, 5],
                  [11, 21, 14],
                  [8, 5, 15],
                  [11, 12, 21],
                  [21, 20, 25]])
    K = np.shape(X)[1] - 1
    print('样本集(10行3列，10个样例，每个样例3个特征):\n', X)
    pca = CPCA(X, K)

    
