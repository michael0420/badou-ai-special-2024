import numpy as np


def WarpPerspectiveMatrix(src, dst):
    # 检查shape相同 且至少有4组点
    assert src.shape[0] == dst.shape[0] and src.shape[0] >= 4
    nums = src.shape[0]
    ''' 
    A * warpMatrix = B  
    '''
    A = np.zeros((2 * nums, 8))  # 8X8矩阵  A矩阵
    B = np.zeros((2 * nums, 1))  # 8X1矩阵  透视变换矩阵
    for i in range(0, nums):
        # 从数组 src 中提取第 i 行的数据，然后将其赋值给变量 A_i。这是一种常见的操作，用于获取数组中特定行的数据。
        A_i = src[i, :]    # A_i [10. 457.]
        B_i = dst[i, :]    # B_i [10. 457.]
        '''
             x0  y0  1  0  0  0  -x0X'0 -y0X'0
        '''
        # [ 1.00e+01  4.57e+02  1.00e+00  0.00e+00  0.00e+00  0.00e+00 -1.00e+02, -4.57e+03]
        A[2 * i, :] = [A_i[0], A_i[1], 1, 0, 0, 0, -A_i[0] * B_i[0], -A_i[1] * B_i[0]]
        # 将透视变换矩阵 B 的第 2*i 个元素赋值为 B_i 的第一个元素。
        B[2 * i] = B_i[0]
        '''
             0  0  0  x0  y0  1  -x0Y'0  -y0Y'0 
        '''
        # [ 0.00000e+00  0.00000e+00  0.00000e+00  1.00000e+01  4.57000e+02,  1.00000e+00 -4.57000e+03 -2.08849e+05]
        A[2 * i + 1, :] = [0, 0, 0, A_i[0], A_i[1], 1, -A_i[0] * B_i[1], -A_i[1] * B_i[1]]
        # 将透视变换矩阵 B 的第 2*i+1 个元素赋值为 B_i 的第二个元素。
        B[2 * i + 1] = B_i[1]

    # NumPy 中用于将数组转换为矩阵的函数
    A = np.mat(A)
    print('A为\n', A)
    '''
     [[ 1.00000e+01  4.57000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -1.00000e+02 -4.57000e+03], 
      [ 0.00000e+00  0.00000e+00  0.00000e+00  1.00000e+01  4.57000e+02,   1.00000e+00 -4.57000e+03 -2.08849e+05], 
      [ 3.95000e+02  2.91000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -1.56025e+05 -1.14945e+05],
      [ 0.00000e+00  0.00000e+00  0.00000e+00  3.95000e+02  2.91000e+02,   1.00000e+00 -1.14945e+05 -8.46810e+04], 
      [ 6.24000e+02  2.91000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -3.89376e+05 -1.81584e+05], 
      [ 0.00000e+00  0.00000e+00  0.00000e+00  6.24000e+02  2.91000e+02,   1.00000e+00 -1.81584e+05 -8.46810e+04],
      [ 1.00000e+03  4.57000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -1.00000e+06 -4.57000e+05], 
      [ 0.00000e+00  0.00000e+00  0.00000e+00  1.00000e+03  4.57000e+02,   1.00000e+00 -4.57000e+05 -2.08849e+05]]
    '''
    # 用A.I求出A的逆矩阵，然后与B相乘，求出warpMatrix
    warpMatrix = A.I * B  # 求出a_11、a_12、a_13、a_21、a_22、a_23、a_31、a_32

    # 结果的后处理
    warpMatrix = np.array(warpMatrix).T[0]
    warpMatrix = np.insert(warpMatrix, warpMatrix.shape[0], values=1.0, axis=0)  # 插入a_33 = 1
    warpMatrix = warpMatrix.reshape((3, 3))
    return warpMatrix


if __name__ == '__main__':
    print('warpMatrix')
    src = [[10.0, 457.0], [395.0, 291.0], [624.0, 291.0], [1000.0,457.0]]
    src = np.array(src)  # 原图4X2

    dst = [[46.0, 920.0], [46.0, 100.0], [600.0, 100.0], [600.0, 920.0]]
    dst = np.array(src)  # 目标图4X2
    warpMatrix = WarpPerspectiveMatrix(src, dst)
    print(warpMatrix)


'''
np.zeros(shape, dtype=float, order='C')
    shape：表示数组的形状，可以是一个整数，如 5，表示创建一个长度为 5 的一维数组；也可以是一个元组，如 (2, 3)，表示创建一个 2 行 3 列的二维数组。
    dtype：可选参数，表示数组的数据类型，如 float、int 等，默认为 float。
    order：可选参数，表示数组在内存中的存储顺序，'C' 表示 C 风格的存储（按行存储），'F' 表示 Fortran 风格的存储（按列存储），默认为 'C'。
    例如，np.zeros((2, 3), dtype=int) 将创建一个 2 行 3 列的二维数组，其中所有元素的值都为 0，数据类型为整数。

img.shape 是用于获取图像数组形状的属性。在使用 Python 中的图像处理库（如 OpenCV 或者 PIL）时，可以通过 img.shape 来获取图像的形状信息。
假设 img 是一个图像数组，那么 img.shape 返回一个元组，其中包含了图像数组的形状信息。
     如果是一个彩色图像，通常返回的是一个包含三个元素的元组，分别表示高度、宽度和通道数。如果是灰度图像，返回的是一个包含两个元素的元组，分别表示高度和宽度。
        例如，如果要获取图像数组 img 的形状信息，可以这样做：
        height, width, channels = img.shape  这样就可以将图像的高度、宽度和通道数分别赋值给 height、width 和 channels 这三个变量。。
'''
