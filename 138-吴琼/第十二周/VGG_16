import tensorflow as tf

slim = tf.contrib.slim


def vgg_16(inputs,
           num_classes=1000,
           is_training=True,
           dropout_keep_prob =0.5,
           spatial_squeeze = true,
           scope = 'vgg_16'):
    with tf.variable_scope(scope,'vgg_16',[inputs]):
        net = slim.repeat(inputs,2,slim.conv2d,64,[3,3],scope='conv1')
        net = slim.max_pool2d(net,[2,2],scope='pool1')

        net = slim.repeat(net,2,slim.conv2d,128,[3,3],scope='conv2')
        net = slim.max_pool2d(net,[2,2],scope='pool2')

        net = slim.repeat(net,3,slim.conv2d,256,[3,3],scope='conv3')
        net = slim.max_pool2d(net,[2,2],scope= 'pool3')

        net = slim.repeat(net,3,slim.conv2d,512,[3,3],scope='conv4')
        net = slim.max_pool2d(net,[2,2],scope='pool4')

        net = slim.repeat(net,3,slim.conv2d,512,[3,3],scope='pool5')
        net = slim.max_pool2d(net,[2,2],scope='pool5')
        #卷积代替全连接
        net = slim.conv2d(net,4096,[7,7],padding='VALID',scope='fc6')
        net = slim.dropout(net,dropout_keep_prob,is_training=is_training,scope='dropout6')

        net = slim.conv2d(net,4096,[1,1],scope='fc7')
        net = slim.dropout(net,dropout_keep_prob,is_training=is_training,scope='dropout7')

        net = slim.conv2d(net,num_classes,[1,1],
                          activation_fn = None,
                          normalizer_fn = None,
                          scope = 'fc8')
        #卷积输出结果平铺
        if spatial_squeeze:
            net = tf.squeeze(net,[1,2],name = 'fc8/squeezed')
        return  net


#########################################################################33
import vgg_16
import tensorflow as tf
import numpy as np
import utils

img1 = utils.load_image("./test_data/dog.jpg")#老师路径并非自己的路径
inputs = tf.placeholder(tf.float32,[None,None,3])
resized_img = utils.resize_image(inputs,(224,224))

prediction = vgg_16.vgg_16(resized_img)
sess = tf.Session()
ckpt_filename='./model/vgg_16.ckpt'#老师路径并非自己的路径
sess.run(tf.global_variables_initializer())
saver = tf.train.Saver()
saver.restore(sess,ckpt_filename)

pro = tf.nn.softmax(prediction)
pre = sess.run(pro,feed_dict={inputs:img1})

print('redult:')
utils.print_prob(pre[0],'./synset.txt')
