
import cv2
import numpy as np


    #定义双线性插值函数
    def bilinear_interpolation(img, dst_h,dst_w):
    #原图大小
    src_h, src_w, channel = img.shape

    #如果原图的坐标跟目标图的坐标一致，则返回原图的像素
    if src_h == dst_h and src_w == dst_w:
        return img.copy()
    #定义一个空值
    dst_img = np.zeros((dst_h, dst_w, 3), dtype=np.uint8)
    #计算原图与目标图的比例
    scale_x, scale_y = float(src_w) / dst_w, float(src_h) / dst_h
    for i in range(channel):
        for dst_y in range(dst_h):
            for dst_x in range(dst_w):
               #中心重合
                src_x = (dst_x + 0.5) * scale_x - 0.5
                src_y = (dst_y + 0.5) * scale_y - 0.5

                #边界值处理
                src_x0 = int(np.floor(src_x))  # np.floor()返回不大于输入参数的最大整数。（向下取整）
                src_x1 = min(src_x0 + 1, src_w - 1)
                src_y0 = int(np.floor(src_y))
                src_y1 = min(src_y0 + 1, src_h - 1)

                # 相邻四个点，分母都是1
                temp0 = (src_x1 - src_x) * img[src_y0, src_x0, i] + (src_x - src_x0) * img[src_y0, src_x1, i]
                temp1 = (src_x1 - src_x) * img[src_y1, src_x0, i] + (src_x - src_x0) * img[src_y1, src_x1, i]
                dst_img[dst_y, dst_x, i] = int((src_y1 - src_y) * temp0 + (src_y - src_y0) * temp1)

    return dst_img


if __name__ == '__main__':
    img = cv2.imread(r"D:\baduzl\badou\2\dama\lenna.png")

    dst1 = bilinear_interpolation(img, 200, 200)
    # 展示缩小后的图片
    cv2.imshow('srot img ', dst1)
    dst2 = bilinear_interpolation(img, 900, 900)
    # 展示放大后的图片
    cv2.imshow('big img ', dst2)
    #展示原图
    cv2.imshow('img',img)
    cv2.waitKey(0)
