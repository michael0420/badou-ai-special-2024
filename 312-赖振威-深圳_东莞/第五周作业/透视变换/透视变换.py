import cv2  # 导入OpenCV库，用于图像处理
import numpy as np  # 导入NumPy库，用于矩阵运算

'''
### 代码逻辑和作用
1. **导入库**:
   - 导入OpenCV库和NumPy库，用于图像处理和矩阵运算。

2. **读取图像**:
   - 使用 `cv2.imread` 读取图像文件 `photo1.jpg`，并将其存储在变量 `img` 中。
   - 复制图像 `img`，存储在 `result3` 中，以便后续操作使用。

3. **定义顶点坐标**:
   - 定义源图像的四个顶点坐标 `src`，这些坐标表示图像中需要进行透视变换的四个点。
   - 定义目标图像的四个顶点坐标 `dst`，这些坐标表示变换后图像中对应的四个点。

4. **打印图像信息**:
   - 打印原始图像的形状信息（高度、宽度、通道数），以了解图像的基本属性。

5. **生成透视变换矩阵**:
   - 使用 `cv2.getPerspectiveTransform` 函数生成透视变换矩阵 `m`，该矩阵将源点坐标 `src` 映射到目标点坐标 `dst`。
   - 打印透视变换矩阵 `m`，以供调试和验证。

6. **进行透视变换**:
   - 使用 `cv2.warpPerspective` 函数对图像进行透视变换，变换后的图像存储在 `result` 中，大小为 `(337, 488)`。

7. **显示图像**:
   - 使用 `cv2.imshow` 显示原始图像 `img` 和变换后的图像 `result`。
   - 使用 `cv2.waitKey(0)` 等待按键事件，0表示无限等待，按任意键可关闭显示窗口。

该代码的功能是对图像进行透视变换，通过定义源图像和目标图像的顶点坐标，生成透视变换矩阵，并应用该矩阵对图像进行变换，从而实现图像的透视校正和映射。'''

img = cv2.imread('photo1.jpg')  # 读取图像 'photo1.jpg'，并将其存储在变量img中

result3 = img.copy()  # 创建图像的副本，存储在result3中

'''
注意这里src和dst的输入并不是图像，而是图像对应的顶点坐标。
'''

# 定义源图像的四个顶点坐标
src = np.float32([[207, 151], [517, 285], [17, 601], [343, 731]])
# 定义目标图像的四个顶点坐标
dst = np.float32([[0, 0], [337, 0], [0, 488], [337, 488]])

print(img.shape)  # 打印图像的形状信息 (高度, 宽度, 通道数)

# 生成透视变换矩阵，使用src和dst的顶点坐标
m = cv2.getPerspectiveTransform(src, dst)  # m是透视变换矩阵
print("warpMatrix:")  # 打印提示信息
print(m)  # 打印透视变换矩阵

# 使用透视变换矩阵对图像进行变换
result = cv2.warpPerspective(result3, m, (337, 488))  # result是变换后的图像，大小为(337, 488)

cv2.imshow("src", img)  # 显示原始图像
cv2.imshow("result", result)  # 显示变换后的图像
cv2.waitKey(0)  # 等待按键事件，0表示无限等待
